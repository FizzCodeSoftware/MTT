namespace MTTFC
{
    using Microsoft.Build.Framework;
    using Microsoft.Build.Utilities;
    using System;

    public abstract class ConvertMainConfiguration : Task
    {
        /// <summary>
        /// The current working directory for the convert process
        /// </summary>
        public string WorkingDirectory { get; set; }

        /// <summary>
        /// The directory to save the ts models
        /// </summary>
        public string ConvertDirectory { get; set; }

        /// <summary>
        /// Determines the naming style of the generated files and folders
        /// </summary>
        public string PathStyle
        {
            get => _pathStyle.ToString();
            set => _pathStyle = (PathStyle)Enum.Parse(typeof(PathStyle), value);
        }

        /// <summary>
        /// Comments at the top of each file that it was auto generated
        /// </summary>
        public bool IsAutoGeneratedTag { get; set; } = true; //default value if one is not provided;

        public bool IsModelInTSFileName { get; set; } = true; //default value if one is not provided;

        /// <summary>
        /// Determines whether to generate numeric or string values in typescript enums
        /// </summary>
        public string EnumValues
        {
            get => _enumValues.ToString();
            set => _enumValues = ConvertToEnum<EnumValues>(value);
        }

        public string ConvertToType
        {
            get => _convertToType.ToString();
            set => _convertToType = ConvertToEnum<ConvertToType>(value);
        }

        public static T ConvertToEnum<T>(string value)
        {
            return (T)Enum.Parse(typeof(T), value);
        }

        protected MessageImportance LoggingImportance { get; } = MessageImportance.High;  //If its not high then there are no logs

        private PathStyle _pathStyle;
        protected PathStyle GetPathStyle()
        {
            return _pathStyle;
        }

        private EnumValues _enumValues;
        protected EnumValues GetEnumValues()
        {
            return _enumValues;
        }

        private ConvertToType _convertToType;
        protected ConvertToType GetConvertToType()
        {
            return _convertToType;
        }
    }
}
