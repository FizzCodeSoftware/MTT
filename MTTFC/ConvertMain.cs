namespace MTTFC
{
    using Microsoft.Build.Framework;
    using Microsoft.Build.Utilities;
    using System;

    public class ConvertMain : Task
    {
        /// <summary>
        /// The current working directory for the convert process
        /// </summary>
        public string WorkingDirectory { get; set; }

        /// <summary>
        /// The directory to save the ts models
        /// </summary>
        public string ConvertDirectory { get; set; }

        /// <summary>
        /// Determines the naming style of the generated files and folders
        /// </summary>
        public string PathStyle
        {
            get => _pathStyle.ToString();
            set => _pathStyle = (PathStyle)Enum.Parse(typeof(PathStyle), value);
        }

        /// <summary>
        /// Comments at the top of each file that it was auto generated
        /// </summary>
        public bool IsAutoGeneratedTag { get; set; } = true; //default value if one is not provided;

        /// <summary>
        /// Determines whether to generate numeric or string values in typescript enums
        /// </summary>
        public string EnumValues
        {
            get => _enumValues.ToString();
            set => _enumValues = (EnumValues)Enum.Parse(typeof(EnumValues), value);
        }

        protected MessageImportance LoggingImportance { get; } = MessageImportance.High;  //If its not high then there are no logs

        private EnumValues _enumValues;

        private PathStyle _pathStyle;

        private readonly ConvertService convertService;

        public ConvertMain()
        {
            convertService = new ConvertService(Log.LogMessage, new ConvertServiceParameters()
            {
                WorkingDirectory = WorkingDirectory,
                ConvertDirectory = ConvertDirectory,
                IsAutoGeneratedTag = IsAutoGeneratedTag,
                EnumValues = _enumValues,
                PathStyle = _pathStyle
            });
        }

        public override bool Execute()
        {
            Log.LogMessage(LoggingImportance, "Starting MTT");
            var result = convertService.Execute();
            Log.LogMessage(LoggingImportance, "Finished MTT");
            return result;
        }
    }
}
