namespace MTTRunner
{
    using System;
    using System.Collections.Generic;
    using MTTFC;

    public static class Program
    {
        public static void Main(string[] args)
        {
            Program.StartService(args);
        }

        public static void StartService(string[] args)
        {
            var convertService = new ConvertService((logString, logArgs) => Console.WriteLine(logString, logArgs),
                new ConvertServiceParameters()
                {
                    WorkingDirectory = args[0],
                    ConvertDirectory = args[1],
                    ConvertToType = args.Length >=3 ? ConvertToEnum<ConvertToType>(args[2]) : ConvertToType.Interface,
                    EnumValues = args.Length >= 4 ? ConvertToEnum<EnumValues>(args[3]) : EnumValues.Default,
                    PathStyle = args.Length >= 5 ? ConvertToEnum<PathStyle>(args[4]) : PathStyle.Default,
                    IsAutoGeneratedTag = args.Length >= 6 ? bool.Parse(args[5]) : true,
                    IsModelInTSFileName = args.Length >= 7 ? bool.Parse(args[6]) : false,
                    Implements = args.Length >= 8 ? CreateDictionary(args[7]) : new Dictionary<string, (string type, string from)>(),
                    Extends = args.Length >= 9 ? CreateDictionary(args[8]) : new Dictionary<string, (string type, string from)>()
                });

            convertService.Execute();
        }

        public static Dictionary<string, (string type, string from)> CreateDictionary(string valuesString)
        {
            var dictionary = new Dictionary<string, (string type, string from)>();
            var values = valuesString.Split(",");
            if (values.Length % 2 != 0)
                throw new ArgumentException("Provide even number of comma separated parameters.");

            for (int i = 0; i < values.Length; i += 2)
            {
                var typeAndFrom = values[i + 1].Split(":");
                dictionary.Add(values[i], (typeAndFrom[0], typeAndFrom[1]));
            }

            return dictionary;
        }

        public static T ConvertToEnum<T>(string value)
        {
            return (T)Enum.Parse(typeof(T), value);
        }
    }
}
