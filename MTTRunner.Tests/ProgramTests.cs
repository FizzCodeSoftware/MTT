namespace MTTRunner.Tests
{
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System.IO;
    using System;

    [TestClass]
    public class ProgramTests
    {
        private readonly string CurrentDir = Directory.GetCurrentDirectory().Replace("\\", "/");
        private readonly string WorkingDir = "workingDir/";
        private readonly string ConvertDir = "convertDir/";
        private string VehicleFile;
        private string VehicleStateFile;

        [TestInitialize]
        public void Setup()
        {
            VehicleFile = Path.Combine(CurrentDir, ConvertDir, "Vehicles/vehicle.ts");
            VehicleStateFile = Path.Combine(CurrentDir, ConvertDir, "Vehicles/vehicleState.ts");

            // var resourcesX = CurrentDir.Replace("Source/MTTRunner.Tests/bin/Debug/netcoreapp2.2", "example/Resources");

            var resources = CurrentDir + "/../../../../example/Resources";

            if (!Directory.Exists(resources))
            {
                throw new Exception("Resources Directory does not exist");
            }

            if (Directory.Exists(WorkingDir))
            {
                Directory.Delete(WorkingDir, true);
            }

            TestHelper.DirectoryCopy(resources, WorkingDir, true);

            var dirs = new string[] { WorkingDir, ConvertDir };

            Program.StartService(dirs);
        }

        [TestMethod]
        public void WorkingDirExists()
        {
            Assert.IsTrue(Directory.Exists(Path.Combine(CurrentDir, WorkingDir)));
        }

        [TestMethod]
        public void ConvertDirExists()
        {
            Assert.IsTrue(Directory.Exists(Path.Combine(CurrentDir, ConvertDir)));
        }

        [TestMethod]
        public void ConvertedFileExists()
        {
            Assert.IsTrue(File.Exists(VehicleFile));
        }

        [TestMethod]
        public void AutoGeneratedExists()
        {
            string[] lines = File.ReadAllLines(VehicleFile);

            Assert.AreEqual("/* Auto Generated */", lines[0]);
        }

        [TestMethod]
        public void DifferentDirImportStatementExists()
        {
            string[] lines = File.ReadAllLines(VehicleFile);

            Assert.AreEqual("import { Entity } from \"./../entity\";", lines[2]);
        }

        [TestMethod]
        public void SameDirImportStatementExists()
        {
            string[] lines = File.ReadAllLines(VehicleFile);

            Assert.AreEqual("import { VehicleState } from \"./vehicleState\";", lines[4]);
        }

        [TestMethod]
        public void ClassTransformationExists()
        {
            string[] lines = File.ReadAllLines(VehicleFile);

            Assert.AreEqual("export interface Vehicle extends Entity {", lines[7]);
        }

        [TestMethod]
        public void PropertyExists()
        {
            string[] lines = File.ReadAllLines(VehicleFile);

            Assert.AreEqual("    year: number;", lines[8]);
        }

        [TestMethod]
        public void OptionalPropertyExists()
        {
            string[] lines = File.ReadAllLines(VehicleFile);

            Assert.AreEqual("    mileage?: number;", lines[11]);
        }

        [TestMethod]
        public void CheckMapExists()
        {
            string[] lines = File.ReadAllLines(VehicleFile);

            Assert.AreEqual("    options: Map<string, Units>;", lines[12]);
        }

        [TestMethod]
        public void EnumPropertyExists()
        {
            string[] lines = File.ReadAllLines(VehicleFile);

            Assert.AreEqual("    condition: VehicleState;", lines[13]);
        }

        [TestMethod]
        public void ArrayExists()
        {
            string[] lines = File.ReadAllLines(VehicleFile);

            Assert.AreEqual("    parts: Part[];", lines[14]);
        }

        [TestMethod]
        public void InitializedListExists()
        {
            string[] lines = File.ReadAllLines(VehicleFile);

            Assert.AreEqual("    spareParts: Part[];", lines[15]);
        }

        [TestMethod]
        public void GuidExists()
        {
            string[] lines = File.ReadAllLines(VehicleFile);
            Assert.AreEqual("    id: string;", lines[16]);
        }

        [TestMethod]
        public void CommentsDoNotExist()
        {
            foreach (string line in File.ReadAllLines(VehicleFile))
            {
                Assert.IsFalse(line.Contains("//"));
            }
        }

        [TestMethod]
        public void PreprocessorDirectivesDoNotExist()
        {
            foreach (string line in File.ReadAllLines(VehicleFile))
            {
                Assert.IsTrue(TestHelper.IsNotPreProcessorDirective(line));
            }
        }

        [TestMethod]
        public void UsingStatementDoesNotExist()
        {
            foreach (string line in File.ReadAllLines(VehicleFile))
            {
                Assert.IsTrue(TestHelper.DoesNotStrictContain(line, "using"));
            }
        }

        [TestMethod]
        public void NamespaceStatementDoesNotExist()
        {
            foreach (string line in File.ReadAllLines(VehicleFile))
            {
                Assert.IsTrue(TestHelper.DoesNotStrictContain(line, "namespace"));
            }
        }

        [TestMethod]
        public void EnumTransformationExists()
        {
            string[] lines = File.ReadAllLines(VehicleStateFile);

            Assert.AreEqual("export enum VehicleState {", lines[2]);
        }

        [TestMethod]
        public void EnumPropertyWithValueExists()
        {
            string[] lines = File.ReadAllLines(VehicleStateFile);

            Assert.AreEqual("    broken = 1,", lines[3]);
        }

        [TestMethod]
        public void EnumPropertyWithoutValueExists()
        {
            string[] lines = File.ReadAllLines(VehicleStateFile);

            Assert.AreEqual("    used,", lines[4]);
        }
    }
}